generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  providerData       Json?
  isVerified         Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([provider])
  @@index([userId])
}

model Event {
  id              String          @id @default(cuid())
  title           String
  summary         String?
  description     String?
  eventType       EventType
  status          EventStatus     @default(DRAFT)
  startTime       DateTime
  endTime         DateTime?
  timezone        String?
  location        String
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  isOnline        Boolean         @default(false)
  onlineUrl       String?
  maxParticipants Int
  minParticipants Int?
  costPerPerson   Decimal?        @db.Decimal(10, 2)
  isFree          Boolean         @default(true)
  organizerId     String
  coverImage      String?
  tags            String[]
  isPublic        Boolean         @default(true)
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  publishedAt     DateTime?
  organizer       User            @relation("OrganizerEvents", fields: [organizerId], references: [id], onDelete: Cascade)
  eventDetails    EventDetails?
  images          EventImage[]
  reviews         EventReview[]
  waitlist        EventWaitlist[]
  participants    Participant[]
  categories      EventCategory[] @relation("EventToEventCategory")

  @@index([eventType])
  @@index([isActive])
  @@index([location])
  @@index([organizerId])
  @@index([startTime])
  @@index([status])
  @@index([tags])
}

model EventCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]         @relation("EventToEventCategory")

  @@index([isActive])
  @@index([name])
}

model EventDetails {
  id           String  @id @default(cuid())
  eventId      String  @unique
  sportType    String?
  skillLevel   String?
  equipment    String?
  rules        String?
  format       String?
  duration     Int?
  materials    String?
  intensity    String?
  ageGroup     String?
  customFields Json?
  Event        Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([format])
  @@index([skillLevel])
  @@index([sportType])
}

model EventImage {
  id        String   @id @default(cuid())
  eventId   String
  imageUrl  String
  altText   String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  Event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([isPrimary])
}

model EventReview {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  rating    Int
  comment   String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId])
  @@index([rating])
}

model EventWaitlist {
  id         String    @id @default(cuid())
  eventId    String
  userId     String
  position   Int
  joinedAt   DateTime  @default(now())
  notifiedAt DateTime?
  Event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId])
  @@index([position])
}

model Participant {
  id               String            @id @default(cuid())
  userId           String
  eventId          String
  joinedAt         DateTime          @default(now())
  status           ParticipantStatus @default(REGISTERED)
  notes            String?
  waitlistPosition Int?
  hasPaid          Boolean           @default(false)
  paymentAmount    Decimal?          @db.Decimal(10, 2)
  paymentMethod    String?
  event            Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId])
  @@index([hasPaid])
  @@index([status])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
  @@index([userId])
}

model SocialLink {
  id          String      @id
  profileId   String
  platform    String
  url         String
  username    String?
  UserProfile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, platform])
  @@index([platform])
}

model User {
  id                   String          @id @default(cuid())
  email                String          @unique
  emailVerified        DateTime?
  passwordHash         String?
  passwordSalt         String?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  isActive             Boolean         @default(true)
  isVerified           Boolean         @default(false)
  lastLoginAt          DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  accounts             Account[]
  events               Event[]          @relation("OrganizerEvents")
  EventReview          EventReview[]
  EventWaitlist        EventWaitlist[]
  Participant          Participant[]
  Session              Session[]
  profile              UserProfile?

  @@index([email])
  @@index([isActive])
}

model UserPreferences {
  id                 String       @id @default(cuid())
  profileId          String       @unique
  language           String       @default("en")
  theme              String       @default("light")
  emailNotifications Boolean      @default(true)
  pushNotifications  Boolean      @default(true)
  privacyLevel       PrivacyLevel @default(PUBLIC)
  eventNotifications Boolean      @default(true)
  maxEventDistance   Int?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  UserProfile        UserProfile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id              String           @id @default(cuid())
  userId          String           @unique
  firstName       String
  lastName        String
  displayName     String?
  bio             String?
  avatar          String?
  phone           String?
  dateOfBirth     DateTime?
  gender          Gender?
  location        String?
  timezone        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  SocialLink      SocialLink[]
  UserPreferences UserPreferences?
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([firstName, lastName])
  @@index([location])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
  ARCHIVED
}

enum EventType {
  SOCCER
  CRICKET
  TENNIS
  VOLLEYBALL
  PICKLEBALL
  VIDEO_GAMES
  COOKING
  TECH
  WELLNESS
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum ParticipantStatus {
  REGISTERED
  CONFIRMED
  CANCELLED
  WAITLISTED
  NO_SHOW
}

enum PrivacyLevel {
  PRIVATE
  FRIENDS_ONLY
  PUBLIC
}
